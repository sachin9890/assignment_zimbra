{"version":3,"sources":["utils/API.js","products/Products.js","productDetails/productDetails.js","App.js","serviceWorker.js","index.js"],"names":["headers","API","url","method","body","data","JSON","strigify","fetch","Products","state","products","category","selectedCategoryId","selectedCategoryName","onCategoryChange","evt","target","value","selectedIndex","setState","name","getProducts","categoryId","then","res","json","response","newState","length","id","this","Row","Col","sm","className","FormGroup","row","Label","for","Input","type","onChange","map","ele","index","key","to","Card","CardImg","src","imageUrl","alt","CardBody","CardTitle","Component","ProductDetails","useParams","useState","productDetails","setProductDetails","useEffect","width","description","App","Navbar","color","light","expand","NavbarBrand","href","Nav","navbar","NavItem","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aea1f887.chunk.js","sourcesContent":["const headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json;charet=UTF-8'\n}\n\nconst baseURL = 'https://whispering-fjord-31677.herokuapp.com';\n\nconst API = (url, method, body) => {\n    let data = body ? {...headers, method, body:JSON.strigify(body)} : {...headers, method}\n    return fetch(`${baseURL}${url}`, data)\n}\n\nexport default API","import React, { Component, Fragment } from 'react';\nimport { Card, CardImg, CardBody, CardTitle, Row, Col, Input, FormGroup, Label } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\nimport API from '../utils/API';\nimport './Products.css';\n\nexport default class Products extends Component {\n\n  state = {\n    products: [],\n    category: [],\n    selectedCategoryId: '',\n    selectedCategoryName: ''\n  }\n\n  componentDidMount() {\n    API('/categories', 'GET')\n      .then((res) => res.json())\n      .then((response) => {\n        let newState = this.state;\n        newState.category = response;\n\n        if (response.length > 0) {\n\n          const {\n            id,\n            name\n          } = response[0];\n\n          newState.selectedCategoryId = id;\n          newState.selectedCategoryName = name;\n        }\n\n        this.setState(newState, () => {\n          this.getProducts(newState.selectedCategoryId);\n        });\n      });\n  }\n\n  onCategoryChange = (evt) => {\n    const {\n      target: {\n        value,\n        selectedIndex\n      }\n    } = evt;\n\n    this.setState({\n      selectedCategoryId: value,\n      selectedCategoryName: this.state.category[selectedIndex].name,\n      products: []\n    })\n    this.getProducts(value);\n  }\n\n  getProducts = (categoryId) => {\n    API(`/products?categoryId=${categoryId}`, 'GET')\n      .then((res) => res.json())\n      .then((response) => {\n        this.setState({\n          products: response\n        })\n      })\n  }\n\n  render() {\n\n    const {\n      products,\n      category,\n      selectedCategoryId,\n      selectedCategoryName\n    } = this.state;\n      \n    return (\n      <Fragment>\n        <Row>\n          <Col sm=\"6\" className=\"mx-auto\">\n            <FormGroup row>\n              <Label for=\"category\" sm={2} className=\"text-right\">Category</Label>\n              <Col sm={4}>\n                <Input type=\"select\" name=\"category\" id=\"category\" onChange={this.onCategoryChange} value={selectedCategoryId}>\n                  { category.map((ele, index) => {\n                    return(\n                      <option key={index} value={ele.id}>{ele.name}</option>\n                    )\n                  }) }\n                </Input>\n              </Col>\n            </FormGroup>\n          </Col>\n        </Row>\n        <hr/>\n        <Row className=\"ml-3 mr-3 mt-3\">\n          { products.map((ele, index) => {\n            return(\n              <Col sm=\"3\" className=\"mb-4\" key={index}>\n                <Link to={`/product/${ele.categoryId}/${selectedCategoryName}/${ele.name}`}>\n                  <Card className=\"p-3 minHeight\">\n                    <CardImg src={ele.imageUrl} alt=\"Card image cap\" />\n                    <CardBody>\n                      <CardTitle>{ele.name}</CardTitle>\n                    </CardBody> \n                  </Card>\n                </Link>\n              </Col>\n            )\n          }) }\n        </Row>\n      </Fragment>\n    )\n  }\n\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { Row, Col, Card } from 'reactstrap';\nimport API from '../utils/API';\nimport './productDetails.css';\n\nconst ProductDetails = () => {\n    \n  let {\n    categoryId,\n    category,\n    name\n  } = useParams();\n\n  const [productDetails, setProductDetails] = useState([]);\n\n  useEffect(() => {\n    API(`/productDetails?categoryId=${categoryId}&name=${name}`, 'GET')\n      .then((res) => res.json())\n      .then((response) => {\n        setProductDetails(response[0]);\n      });\n  }, [categoryId, category, name]);\n\n  return (\n    <Row>\n      <Col sm=\"6\" className=\"mx-auto\">\n        <Card className=\"customCard\">\n          <Row>\n            <Col sm=\"4\">\n                <img width=\"100%\" src={productDetails.imageUrl} alt={productDetails.name}/>\n            </Col>\n            <Col sm=\"8\">\n                <div><h2>{category}</h2></div>\n                <div><h3>{productDetails.name}</h3></div>\n                <div>{productDetails.description}</div>\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ProductDetails;","import React from 'react';\nimport { Navbar, NavbarBrand, Nav, NavItem } from 'reactstrap';\nimport './App.css';\nimport Products from './products/Products';\nimport ProductDetails from './productDetails/productDetails';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar color=\"secondary\" light expand=\"md\">\n          <NavbarBrand href=\"/\">Zimbra</NavbarBrand>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink to=\"/\" className=\"nav-link\">Products</NavLink>\n            </NavItem>\n          </Nav>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\">\n            <Products />\n          </Route>\n          <Route path=\"/product/:categoryId/:category/:name\">\n            <ProductDetails />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}